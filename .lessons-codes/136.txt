Section 26 : Authorization, Policies, Gates
#136. Admin users and overriding permissions
------------------------------------------------
*important : Read notes before write 

[1] App\Providers\AuthServiceProvider.php

Gate::define('update-post' function($user, $post){
   return $user->id === $post->user_id;
});

[2] php artisan make:migration AddIsAdminToUsersTable

[3] database\migrations\...AddIsAdminToUsersTable.php

... up(){

   Schema::table('users', function(Blueprint $table){
      $table->boolean('is_admin')->default(false);
   });

}

... down(){
   Schema::table('users', function(Blueprint $table){
      $table->dropBoolean('is_admin');
   });
}

[4] php artisan migrate

[5] database\factories\UserFactory.php

... definition(){
   return [
      'name' => ...,
      'email' => ...,
      'email_verified_at' => ...,
      'password' => ...,
      'remember_token' => ...,

      'is_admin' => false
   ];
}

... johnDoe(){
   return [
      'name' => ...,
      'email' => ...,
      'is_admin' => true
   ];
}

[6] php artisan db:seed

[7] App\Providers\AuthServiceProvider.php

... boot(){

   $this->...

   Gate::define ...

   Gate::define ...

   Gate::before(function($user, $ability){
      if($user->is_admin && in_array($ability, ['update-post'])){
         return true; 
      }
   });

   // it doesn't work for us now. written to know
   //Gate::after(function($user, $ability, $result){
   //   if($user->is_admin){
   //      return true; 
   //   }
   //});
}

Notes : 