Section 24 : Database seeding
#125. Making Seeder Interactive
------------------------------------------------
*important : Read notes before write 

[1] DatabaseSeeder.php

public function run()
{

   if($this->command->confirm('Do you want to refresh the database ?',true)){
      $this->command->call('migrate:refresh');
      $this->command->info('Database was refreshed');
   }

   ...
}

php artisan db:seed

[2] UsersTableSeeder.php

public function run()
{
   $usersCount = (int)$this->command->ask('How many users would you like ?', 20)
   User::factory()->johnDoe()->create();
   User::factory($usersCount)->create();
   
}

[3] BlogPostsTableSeeder.php

public function run()
{
   $blogPostsCount = (int)$this->command->ask('How many blog posts would you like ?', 50)
   
   $users = User::all();
   
   BlogPost::factory($blogPostsCount)->make()->each(function($post) use ($users){
      $post->user_id = $users->random()->id;
      $post->save();
   });
   
}

[4] UsersTableSeeder.php

public function run()
{
   $usersCount = max((int)$this->command->ask('How many users would you like ?', 20),1);
   User::factory()->johnDoe()->create();
   User::factory($usersCount)->create();
   
}

[5] CommentsSeeder.php

$commentsCount = (int)$this->command->ask('How many comments would you like ?', 150)
$posts = BlogPosts::all();

if($posts->count() === 0){
   $this->command->info('There are no blog posts, so no comments will be added');
   return;
}

Comments::factory($commentsCount)->make()->each(function($comment) use ($posts){
   $comment->blog_post_id = $posts->random()->id;
   $comment->save();
});

[6] 

php artisan migrate:refresh
php artisan db:seed


Notes : 