Section 22 : Model Factories 
#103. Model Factory introduction
------------------------------------------------  

PostTest

Change name : testSee1BlogPostWhenThereIs1 -> testSee1BlogPostWhenThereIs1WithNoComments

public function testSee1BlogPostWithComments()
{
   // arrange
   $post = $this->createDummyBlogPost();

   $response = $this->get('/posts');
}

Fake data is produced with a library called faker

php artisan make:factory CommentFactory --model=Comments
Where is the created factory located?
./database/factories

return [
   'content' => $faker->text
]

php artisan tinker

factory('App\Model\Comments')->create(['blog_post_id => 2]);

Continue PostTest

public function testSee1BlogPostWithComments()
{
   // arrange
   $post = $this->createDummyBlogPost();

   factory(Comments::class, 4)->create([
      'blog_post_id' => $post->id
   ]);

   $response = $this->get('/posts');

   $response->assertSeeText('4 comments');
}

Note: Some functions described in the lecture have changed in Laravel 8, for example.
The factory is created like this:

Comments::factory()->create(['blog_post_id' => 2]);
Comments::factory(3)->create(['blog_post_id' => 2]);

and also in factory created with php artisan make:factory command
no need to define factory class anymore
The faker that will return is as follows:
return [
'content' => $this->faker->text()
]