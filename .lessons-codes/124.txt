Section 24 : Database seeding
#124. Individual Seeder Classes
------------------------------------------------
*important : Read notes before write 

[1]
php bin artisan make:seeder UsersTableSeeder

move from DatabaSeeder.php to database/seeders/UsersTableSeeder.php

UsersTableSeeder.php

$doe = User::factory()->johnDoe()->create();
$else = User::factory(20)->create();

$users = $else->concat([$doe]);

delete what is not needed

public function run()
{
   User::factory()->johnDoe()->create();
   User::factory(20)->create();
}

[2]
php bin artisan make:seeder BlogPostsTableSeeder

move from DatabaSeeder.php to database/seeders/BlogPostsTableSeeder.php

BlogPostsTableSeeder.php

$posts = BlogPost::factory(50)->make()->each(function($post) use ($users){
   $post->user_id = $users->random()->id;
   $post->save();
});

delete what is not needed and add what is needed

public function run()
{
   $users = Users::all();
   BlogPost::factory(50)->make()->each(function($post) use ($users){
      $post->user_id = $users->random()->id;
      $post->save();
   });
}

[3]
php bin artisan make:seeder CommentsTableSeeder

move from DatabaSeeder.php to database/seeders/CommentsTableSeeder.php

CommentsTableSeeder.php

$comments = Comments::factory(150)->make()->each(function($comment) use ($posts){
   $comment->blog_post_id = $posts->random()->id;
   $comment->save();
});

delete what is not needed and add what is needed

public function run()
{
   $posts = BlogPosts::all();
   Comments::factory(150)->make()->each(function($comment) use ($posts){
      $comment->blog_post_id = $posts->random()->id;
      $comment->save();
   });
}

[4]

DatabaseSeeder.php

public function run()
{
   $this->call([
      UsersTableSeeder,
      BlogPostsTableSeeder,
      CommentsTableSeeder,
   ]);
}

[5]

composer dump-autoload
php artisan migrate:refresh --seed

php artisan migrate:refresh

php artisan db:seed --class=UsersTableSeeder
php artisan db:seed --class=BlogPostsTableSeeder
php artisan db:seed --class=CommentsTableSeeder


Notes : 